// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* calculatorService.h
   Generated by wsdl2h 2.8.70 from http://www.dneonline.com/calculator.asmx?wsdl and typemap.dat
   2018-08-30 00:27:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on calculatorService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tempuri = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_tempuri	"http://tempuri.org/"
//gsoap tempuri schema namespace:	http://tempuri.org/
//gsoap tempuri schema elementForm:	qualified
//gsoap tempuri schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":Add
/// @brief "http://tempuri.org/":Add is a complexType.
///
/// struct _tempuri__Add operations:
/// - _tempuri__Add* soap_new__tempuri__Add(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__Add(struct soap*, _tempuri__Add*) default initialize members
/// - int soap_read__tempuri__Add(struct soap*, _tempuri__Add*) deserialize from a source
/// - int soap_write__tempuri__Add(struct soap*, _tempuri__Add*) serialize to a sink
/// - _tempuri__Add* soap_dup__tempuri__Add(struct soap*, _tempuri__Add* dst, _tempuri__Add *src) returns deep copy of _tempuri__Add src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__Add(_tempuri__Add*) deep deletes _tempuri__Add data members, use only on dst after soap_dup__tempuri__Add(NULL, _tempuri__Add *dst, _tempuri__Add *src) (use soapcpp2 -Ed)
struct _tempuri__Add
{
/// Element "intA" of XSD type xs:int.
    int                                  intA                           ;	///< Required element.
/// Element "intB" of XSD type xs:int.
    int                                  intB                           ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":AddResponse
/// @brief "http://tempuri.org/":AddResponse is a complexType.
///
/// struct _tempuri__AddResponse operations:
/// - _tempuri__AddResponse* soap_new__tempuri__AddResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__AddResponse(struct soap*, _tempuri__AddResponse*) default initialize members
/// - int soap_read__tempuri__AddResponse(struct soap*, _tempuri__AddResponse*) deserialize from a source
/// - int soap_write__tempuri__AddResponse(struct soap*, _tempuri__AddResponse*) serialize to a sink
/// - _tempuri__AddResponse* soap_dup__tempuri__AddResponse(struct soap*, _tempuri__AddResponse* dst, _tempuri__AddResponse *src) returns deep copy of _tempuri__AddResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__AddResponse(_tempuri__AddResponse*) deep deletes _tempuri__AddResponse data members, use only on dst after soap_dup__tempuri__AddResponse(NULL, _tempuri__AddResponse *dst, _tempuri__AddResponse *src) (use soapcpp2 -Ed)
struct _tempuri__AddResponse
{
/// Element "AddResult" of XSD type xs:int.
    int                                  AddResult                      ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":Subtract
/// @brief "http://tempuri.org/":Subtract is a complexType.
///
/// struct _tempuri__Subtract operations:
/// - _tempuri__Subtract* soap_new__tempuri__Subtract(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__Subtract(struct soap*, _tempuri__Subtract*) default initialize members
/// - int soap_read__tempuri__Subtract(struct soap*, _tempuri__Subtract*) deserialize from a source
/// - int soap_write__tempuri__Subtract(struct soap*, _tempuri__Subtract*) serialize to a sink
/// - _tempuri__Subtract* soap_dup__tempuri__Subtract(struct soap*, _tempuri__Subtract* dst, _tempuri__Subtract *src) returns deep copy of _tempuri__Subtract src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__Subtract(_tempuri__Subtract*) deep deletes _tempuri__Subtract data members, use only on dst after soap_dup__tempuri__Subtract(NULL, _tempuri__Subtract *dst, _tempuri__Subtract *src) (use soapcpp2 -Ed)
struct _tempuri__Subtract
{
/// Element "intA" of XSD type xs:int.
    int                                  intA                           ;	///< Required element.
/// Element "intB" of XSD type xs:int.
    int                                  intB                           ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":SubtractResponse
/// @brief "http://tempuri.org/":SubtractResponse is a complexType.
///
/// struct _tempuri__SubtractResponse operations:
/// - _tempuri__SubtractResponse* soap_new__tempuri__SubtractResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__SubtractResponse(struct soap*, _tempuri__SubtractResponse*) default initialize members
/// - int soap_read__tempuri__SubtractResponse(struct soap*, _tempuri__SubtractResponse*) deserialize from a source
/// - int soap_write__tempuri__SubtractResponse(struct soap*, _tempuri__SubtractResponse*) serialize to a sink
/// - _tempuri__SubtractResponse* soap_dup__tempuri__SubtractResponse(struct soap*, _tempuri__SubtractResponse* dst, _tempuri__SubtractResponse *src) returns deep copy of _tempuri__SubtractResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__SubtractResponse(_tempuri__SubtractResponse*) deep deletes _tempuri__SubtractResponse data members, use only on dst after soap_dup__tempuri__SubtractResponse(NULL, _tempuri__SubtractResponse *dst, _tempuri__SubtractResponse *src) (use soapcpp2 -Ed)
struct _tempuri__SubtractResponse
{
/// Element "SubtractResult" of XSD type xs:int.
    int                                  SubtractResult                 ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":Multiply
/// @brief "http://tempuri.org/":Multiply is a complexType.
///
/// struct _tempuri__Multiply operations:
/// - _tempuri__Multiply* soap_new__tempuri__Multiply(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__Multiply(struct soap*, _tempuri__Multiply*) default initialize members
/// - int soap_read__tempuri__Multiply(struct soap*, _tempuri__Multiply*) deserialize from a source
/// - int soap_write__tempuri__Multiply(struct soap*, _tempuri__Multiply*) serialize to a sink
/// - _tempuri__Multiply* soap_dup__tempuri__Multiply(struct soap*, _tempuri__Multiply* dst, _tempuri__Multiply *src) returns deep copy of _tempuri__Multiply src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__Multiply(_tempuri__Multiply*) deep deletes _tempuri__Multiply data members, use only on dst after soap_dup__tempuri__Multiply(NULL, _tempuri__Multiply *dst, _tempuri__Multiply *src) (use soapcpp2 -Ed)
struct _tempuri__Multiply
{
/// Element "intA" of XSD type xs:int.
    int                                  intA                           ;	///< Required element.
/// Element "intB" of XSD type xs:int.
    int                                  intB                           ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":MultiplyResponse
/// @brief "http://tempuri.org/":MultiplyResponse is a complexType.
///
/// struct _tempuri__MultiplyResponse operations:
/// - _tempuri__MultiplyResponse* soap_new__tempuri__MultiplyResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__MultiplyResponse(struct soap*, _tempuri__MultiplyResponse*) default initialize members
/// - int soap_read__tempuri__MultiplyResponse(struct soap*, _tempuri__MultiplyResponse*) deserialize from a source
/// - int soap_write__tempuri__MultiplyResponse(struct soap*, _tempuri__MultiplyResponse*) serialize to a sink
/// - _tempuri__MultiplyResponse* soap_dup__tempuri__MultiplyResponse(struct soap*, _tempuri__MultiplyResponse* dst, _tempuri__MultiplyResponse *src) returns deep copy of _tempuri__MultiplyResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__MultiplyResponse(_tempuri__MultiplyResponse*) deep deletes _tempuri__MultiplyResponse data members, use only on dst after soap_dup__tempuri__MultiplyResponse(NULL, _tempuri__MultiplyResponse *dst, _tempuri__MultiplyResponse *src) (use soapcpp2 -Ed)
struct _tempuri__MultiplyResponse
{
/// Element "MultiplyResult" of XSD type xs:int.
    int                                  MultiplyResult                 ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":Divide
/// @brief "http://tempuri.org/":Divide is a complexType.
///
/// struct _tempuri__Divide operations:
/// - _tempuri__Divide* soap_new__tempuri__Divide(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__Divide(struct soap*, _tempuri__Divide*) default initialize members
/// - int soap_read__tempuri__Divide(struct soap*, _tempuri__Divide*) deserialize from a source
/// - int soap_write__tempuri__Divide(struct soap*, _tempuri__Divide*) serialize to a sink
/// - _tempuri__Divide* soap_dup__tempuri__Divide(struct soap*, _tempuri__Divide* dst, _tempuri__Divide *src) returns deep copy of _tempuri__Divide src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__Divide(_tempuri__Divide*) deep deletes _tempuri__Divide data members, use only on dst after soap_dup__tempuri__Divide(NULL, _tempuri__Divide *dst, _tempuri__Divide *src) (use soapcpp2 -Ed)
struct _tempuri__Divide
{
/// Element "intA" of XSD type xs:int.
    int                                  intA                           ;	///< Required element.
/// Element "intB" of XSD type xs:int.
    int                                  intB                           ;	///< Required element.
};

/// @brief Top-level root element "http://tempuri.org/":DivideResponse
/// @brief "http://tempuri.org/":DivideResponse is a complexType.
///
/// struct _tempuri__DivideResponse operations:
/// - _tempuri__DivideResponse* soap_new__tempuri__DivideResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__tempuri__DivideResponse(struct soap*, _tempuri__DivideResponse*) default initialize members
/// - int soap_read__tempuri__DivideResponse(struct soap*, _tempuri__DivideResponse*) deserialize from a source
/// - int soap_write__tempuri__DivideResponse(struct soap*, _tempuri__DivideResponse*) serialize to a sink
/// - _tempuri__DivideResponse* soap_dup__tempuri__DivideResponse(struct soap*, _tempuri__DivideResponse* dst, _tempuri__DivideResponse *src) returns deep copy of _tempuri__DivideResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__tempuri__DivideResponse(_tempuri__DivideResponse*) deep deletes _tempuri__DivideResponse data members, use only on dst after soap_dup__tempuri__DivideResponse(NULL, _tempuri__DivideResponse *dst, _tempuri__DivideResponse *src) (use soapcpp2 -Ed)
struct _tempuri__DivideResponse
{
/// Element "DivideResult" of XSD type xs:int.
    int                                  DivideResult                   ;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:

//gsoap tempuri service name:	CalculatorSoap
//gsoap tempuri service type:	CalculatorSoap
//gsoap tempuri service port:	http://www.dneonline.com/calculator.asmx
//gsoap tempuri service namespace:	http://tempuri.org/
//gsoap tempuri service transport:	http://schemas.xmlsoap.org/soap/http

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref CalculatorSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page CalculatorSoap Binding "CalculatorSoap"

@section CalculatorSoap_operations Operations of Binding "CalculatorSoap"

  - @ref __tempuri__Add

  - @ref __tempuri__Subtract

  - @ref __tempuri__Multiply

  - @ref __tempuri__Divide

  - @ref __tempuri__Add_

  - @ref __tempuri__Subtract_

  - @ref __tempuri__Multiply_

  - @ref __tempuri__Divide_

@section CalculatorSoap_ports Default endpoints of Binding "CalculatorSoap"

  - http://www.dneonline.com/calculator.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CalculatorSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Add                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Add" of service binding "CalculatorSoap".
Adds two integers. This is a test WebService. DNE Online

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Add"

  - Addressing input action: "http://tempuri.org/Add"

  - Addressing output action: "http://tempuri.org/AddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Add(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Add*               tempuri__Add,
    // output parameters:
    struct _tempuri__AddResponse       *tempuri__AddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Add(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Add*               tempuri__Add,
    // output parameters:
    struct _tempuri__AddResponse       *tempuri__AddResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Add SOAP
//gsoap tempuri service method-style:	Add document
//gsoap tempuri service method-encoding:	Add literal
//gsoap tempuri service method-input-action:	Add http://tempuri.org/Add
//gsoap tempuri service method-output-action:	Add http://tempuri.org/AddResponse
int __tempuri__Add(
    struct _tempuri__Add*               tempuri__Add,	///< Input parameter
    struct _tempuri__AddResponse       *tempuri__AddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Subtract                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Subtract" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Subtract"

  - Addressing input action: "http://tempuri.org/Subtract"

  - Addressing output action: "http://tempuri.org/SubtractResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Subtract(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Subtract*          tempuri__Subtract,
    // output parameters:
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Subtract(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Subtract*          tempuri__Subtract,
    // output parameters:
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Subtract SOAP
//gsoap tempuri service method-style:	Subtract document
//gsoap tempuri service method-encoding:	Subtract literal
//gsoap tempuri service method-input-action:	Subtract http://tempuri.org/Subtract
//gsoap tempuri service method-output-action:	Subtract http://tempuri.org/SubtractResponse
int __tempuri__Subtract(
    struct _tempuri__Subtract*          tempuri__Subtract,	///< Input parameter
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Multiply                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Multiply" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Multiply"

  - Addressing input action: "http://tempuri.org/Multiply"

  - Addressing output action: "http://tempuri.org/MultiplyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Multiply(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Multiply*          tempuri__Multiply,
    // output parameters:
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Multiply(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Multiply*          tempuri__Multiply,
    // output parameters:
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Multiply SOAP
//gsoap tempuri service method-style:	Multiply document
//gsoap tempuri service method-encoding:	Multiply literal
//gsoap tempuri service method-input-action:	Multiply http://tempuri.org/Multiply
//gsoap tempuri service method-output-action:	Multiply http://tempuri.org/MultiplyResponse
int __tempuri__Multiply(
    struct _tempuri__Multiply*          tempuri__Multiply,	///< Input parameter
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Divide                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Divide" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Divide"

  - Addressing input action: "http://tempuri.org/Divide"

  - Addressing output action: "http://tempuri.org/DivideResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Divide(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Divide*            tempuri__Divide,
    // output parameters:
    struct _tempuri__DivideResponse    *tempuri__DivideResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Divide(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Divide*            tempuri__Divide,
    // output parameters:
    struct _tempuri__DivideResponse    *tempuri__DivideResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Divide SOAP
//gsoap tempuri service method-style:	Divide document
//gsoap tempuri service method-encoding:	Divide literal
//gsoap tempuri service method-input-action:	Divide http://tempuri.org/Divide
//gsoap tempuri service method-output-action:	Divide http://tempuri.org/DivideResponse
int __tempuri__Divide(
    struct _tempuri__Divide*            tempuri__Divide,	///< Input parameter
    struct _tempuri__DivideResponse    *tempuri__DivideResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Add_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Add_" of service binding "CalculatorSoap".
Adds two integers. This is a test WebService. DNE Online

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Add"

  - Addressing input action: "http://tempuri.org/Add"

  - Addressing output action: "http://tempuri.org/AddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Add_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Add*               tempuri__Add,
    // output parameters:
    struct _tempuri__AddResponse       *tempuri__AddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Add_(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Add*               tempuri__Add,
    // output parameters:
    struct _tempuri__AddResponse       *tempuri__AddResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Add_ SOAP
//gsoap tempuri service method-style:	Add_ document
//gsoap tempuri service method-encoding:	Add_ literal
//gsoap tempuri service method-input-action:	Add_ http://tempuri.org/Add
//gsoap tempuri service method-output-action:	Add_ http://tempuri.org/AddResponse
int __tempuri__Add_(
    struct _tempuri__Add*               tempuri__Add,	///< Input parameter
    struct _tempuri__AddResponse       *tempuri__AddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Subtract_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Subtract_" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Subtract"

  - Addressing input action: "http://tempuri.org/Subtract"

  - Addressing output action: "http://tempuri.org/SubtractResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Subtract_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Subtract*          tempuri__Subtract,
    // output parameters:
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Subtract_(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Subtract*          tempuri__Subtract,
    // output parameters:
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Subtract_ SOAP
//gsoap tempuri service method-style:	Subtract_ document
//gsoap tempuri service method-encoding:	Subtract_ literal
//gsoap tempuri service method-input-action:	Subtract_ http://tempuri.org/Subtract
//gsoap tempuri service method-output-action:	Subtract_ http://tempuri.org/SubtractResponse
int __tempuri__Subtract_(
    struct _tempuri__Subtract*          tempuri__Subtract,	///< Input parameter
    struct _tempuri__SubtractResponse  *tempuri__SubtractResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Multiply_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Multiply_" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Multiply"

  - Addressing input action: "http://tempuri.org/Multiply"

  - Addressing output action: "http://tempuri.org/MultiplyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Multiply_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Multiply*          tempuri__Multiply,
    // output parameters:
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Multiply_(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Multiply*          tempuri__Multiply,
    // output parameters:
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Multiply_ SOAP
//gsoap tempuri service method-style:	Multiply_ document
//gsoap tempuri service method-encoding:	Multiply_ literal
//gsoap tempuri service method-input-action:	Multiply_ http://tempuri.org/Multiply
//gsoap tempuri service method-output-action:	Multiply_ http://tempuri.org/MultiplyResponse
int __tempuri__Multiply_(
    struct _tempuri__Multiply*          tempuri__Multiply,	///< Input parameter
    struct _tempuri__MultiplyResponse  *tempuri__MultiplyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Divide_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tempuri__Divide_" of service binding "CalculatorSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.dneonline.com/calculator.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Divide"

  - Addressing input action: "http://tempuri.org/Divide"

  - Addressing output action: "http://tempuri.org/DivideResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Divide_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _tempuri__Divide*            tempuri__Divide,
    // output parameters:
    struct _tempuri__DivideResponse    *tempuri__DivideResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Divide_(
    struct soap *soap,
    // input parameters:
    struct _tempuri__Divide*            tempuri__Divide,
    // output parameters:
    struct _tempuri__DivideResponse    *tempuri__DivideResponse
  );
@endcode

*/

//gsoap tempuri service method-protocol:	Divide_ SOAP
//gsoap tempuri service method-style:	Divide_ document
//gsoap tempuri service method-encoding:	Divide_ literal
//gsoap tempuri service method-input-action:	Divide_ http://tempuri.org/Divide
//gsoap tempuri service method-output-action:	Divide_ http://tempuri.org/DivideResponse
int __tempuri__Divide_(
    struct _tempuri__Divide*            tempuri__Divide,	///< Input parameter
    struct _tempuri__DivideResponse    *tempuri__DivideResponse	///< Output parameter
);

/**

@page CalculatorSoap Binding "CalculatorSoap"

@section CalculatorSoap_policy_enablers Policy Enablers of Binding "CalculatorSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section tempuri Top-level root elements of schema "http://tempuri.org/"

  - <tempuri:Add> @ref _tempuri__Add
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Add(struct soap*, struct _tempuri__Add*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Add(struct soap*, struct _tempuri__Add*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__Add(struct soap*, const char *URL, struct _tempuri__Add*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__Add(struct soap*, const char *URL, struct _tempuri__Add*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__Add(struct soap*, const char *URL, struct _tempuri__Add*);
    soap_POST_recv__tempuri__Add(struct soap*, struct _tempuri__Add*);
    @endcode

  - <tempuri:AddResponse> @ref _tempuri__AddResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__AddResponse(struct soap*, struct _tempuri__AddResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__AddResponse(struct soap*, struct _tempuri__AddResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__AddResponse(struct soap*, const char *URL, struct _tempuri__AddResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__AddResponse(struct soap*, const char *URL, struct _tempuri__AddResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__AddResponse(struct soap*, const char *URL, struct _tempuri__AddResponse*);
    soap_POST_recv__tempuri__AddResponse(struct soap*, struct _tempuri__AddResponse*);
    @endcode

  - <tempuri:Subtract> @ref _tempuri__Subtract
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Subtract(struct soap*, struct _tempuri__Subtract*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Subtract(struct soap*, struct _tempuri__Subtract*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__Subtract(struct soap*, const char *URL, struct _tempuri__Subtract*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__Subtract(struct soap*, const char *URL, struct _tempuri__Subtract*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__Subtract(struct soap*, const char *URL, struct _tempuri__Subtract*);
    soap_POST_recv__tempuri__Subtract(struct soap*, struct _tempuri__Subtract*);
    @endcode

  - <tempuri:SubtractResponse> @ref _tempuri__SubtractResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__SubtractResponse(struct soap*, struct _tempuri__SubtractResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__SubtractResponse(struct soap*, struct _tempuri__SubtractResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__SubtractResponse(struct soap*, const char *URL, struct _tempuri__SubtractResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__SubtractResponse(struct soap*, const char *URL, struct _tempuri__SubtractResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__SubtractResponse(struct soap*, const char *URL, struct _tempuri__SubtractResponse*);
    soap_POST_recv__tempuri__SubtractResponse(struct soap*, struct _tempuri__SubtractResponse*);
    @endcode

  - <tempuri:Multiply> @ref _tempuri__Multiply
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Multiply(struct soap*, struct _tempuri__Multiply*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Multiply(struct soap*, struct _tempuri__Multiply*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__Multiply(struct soap*, const char *URL, struct _tempuri__Multiply*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__Multiply(struct soap*, const char *URL, struct _tempuri__Multiply*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__Multiply(struct soap*, const char *URL, struct _tempuri__Multiply*);
    soap_POST_recv__tempuri__Multiply(struct soap*, struct _tempuri__Multiply*);
    @endcode

  - <tempuri:MultiplyResponse> @ref _tempuri__MultiplyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__MultiplyResponse(struct soap*, struct _tempuri__MultiplyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__MultiplyResponse(struct soap*, struct _tempuri__MultiplyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__MultiplyResponse(struct soap*, const char *URL, struct _tempuri__MultiplyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__MultiplyResponse(struct soap*, const char *URL, struct _tempuri__MultiplyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__MultiplyResponse(struct soap*, const char *URL, struct _tempuri__MultiplyResponse*);
    soap_POST_recv__tempuri__MultiplyResponse(struct soap*, struct _tempuri__MultiplyResponse*);
    @endcode

  - <tempuri:Divide> @ref _tempuri__Divide
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Divide(struct soap*, struct _tempuri__Divide*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Divide(struct soap*, struct _tempuri__Divide*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__Divide(struct soap*, const char *URL, struct _tempuri__Divide*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__Divide(struct soap*, const char *URL, struct _tempuri__Divide*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__Divide(struct soap*, const char *URL, struct _tempuri__Divide*);
    soap_POST_recv__tempuri__Divide(struct soap*, struct _tempuri__Divide*);
    @endcode

  - <tempuri:DivideResponse> @ref _tempuri__DivideResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__DivideResponse(struct soap*, struct _tempuri__DivideResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__DivideResponse(struct soap*, struct _tempuri__DivideResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tempuri__DivideResponse(struct soap*, const char *URL, struct _tempuri__DivideResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tempuri__DivideResponse(struct soap*, const char *URL, struct _tempuri__DivideResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tempuri__DivideResponse(struct soap*, const char *URL, struct _tempuri__DivideResponse*);
    soap_POST_recv__tempuri__DivideResponse(struct soap*, struct _tempuri__DivideResponse*);
    @endcode

*/

/* End of calculatorService.h */
